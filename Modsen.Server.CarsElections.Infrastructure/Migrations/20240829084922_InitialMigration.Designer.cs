// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modsen.Server.CarsElections.Infrastructure.Data;

#nullable disable

namespace Modsen.Server.CarsElections.Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240829084922_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = "1"
                        },
                        new
                        {
                            Id = "2"
                        });
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = "1",
                            DateTime = new DateTime(2024, 8, 29, 11, 49, 21, 633, DateTimeKind.Local).AddTicks(5331),
                            DislikeCount = 2,
                            LikeCount = 1,
                            Message = "Some message",
                            Type = -1
                        });
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Like", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            CommentId = 1,
                            Type = 2
                        },
                        new
                        {
                            UserId = "2",
                            CommentId = 1,
                            Type = 1
                        },
                        new
                        {
                            UserId = "3",
                            CommentId = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            UserName = "Test"
                        },
                        new
                        {
                            Id = "2",
                            UserName = "Test1"
                        },
                        new
                        {
                            Id = "3",
                            UserName = "Test2"
                        });
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Modsen.Server.CarsElections.Domain.Entities.Car", "Car")
                        .WithMany("Comments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Like", b =>
                {
                    b.HasOne("Modsen.Server.CarsElections.Domain.Entities.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modsen.Server.CarsElections.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Car", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Modsen.Server.CarsElections.Domain.Entities.User", b =>
                {
                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
